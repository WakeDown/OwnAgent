@using System.Globalization
@using Data.Models
@using Helpers
@using OwnAgent.Models
@using OwnAgent.Objects
@using WebGrease

@{
    ViewBag.Title = "Статистика";
    Layout = "~/Views/Shared/_Layout.cshtml";

    int year = Convert.ToInt32(Request.QueryString["year"]);
    int month = Convert.ToInt32(Request.QueryString["month"]);
    int quarter = Convert.ToInt32(Request.QueryString["quarter"]);

    string url2Modify = Url.Action("Stat") + "?" + Request.QueryString;
}
@section head{
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
}



@*<p>
        <div class="row">
            <div class="col l2">
                <a class='dropdown-button btn' href='#' data-activates='mthYear'>@year</a>
                <ul id='mthYear' class='dropdown-content'>
                    @foreach (KeyValuePair<int, int> y in Spend.GetMonthlyReportYears(ViewBag.ClientId))
                    {
                        <li><a href="#!" m="@month" y="@y.Key">@y.Value</a></li>
                    }
                </ul>

            </div>
            <div class="col l2">
                <a class='dropdown-button btn' href='#' data-activates='mthMonth'>@(new DateTime(year, month, 1).ToString("MMMM"))</a>
                <ul id='mthMonth' class='dropdown-content'>
                    @foreach (KeyValuePair<int, string> m in Spend.GetMonthlyReportMonthes(ViewBag.ClientId))
                    {
                        <li><a href="#!" m="@m.Key" y="@year">@m.Value</a></li>
                    }
                </ul>
            </div>
        </div>
    </p>*@
<p>
    @*<ul class="">
            <li class="left">
                <a class="waves-effect waves-light btn indigo lighten-3 @(Request.QueryString["filter"] == "month" ? "disabled" : null)" href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"filter", "month"}})">месяц</a>
            </li>
            <li class="left">
                <a class="waves-effect waves-light btn indigo lighten-3 @(Request.QueryString["filter"] == "quarter" ? "disabled" : null)" href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"filter", "quarter"}})">квартал</a>
            </li>
            <li class="left">
                <a class="waves-effect waves-light btn indigo lighten-3 @(Request.QueryString["filter"] == "year" ? "disabled" : null)" href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"filter", "year"}})">год</a>
            </li>
            <li class="left">
                <a class="waves-effect waves-light btn indigo lighten-3 @(Request.QueryString["filter"] == "5year" ? "disabled" : null)" href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"filter", "5year"}})">5 лет</a>
            </li>
            <li class="left">
                <a class="waves-effect waves-light btn indigo lighten-3 @(Request.QueryString["filter"] == "alltime" ? "disabled" : null)" href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"filter", "alltime"}})">все время</a>
            </li>
        </ul>*@
</p>
<div class="clearfix"></div>
<div class="row">
    <div class="col l4 m6 s12">
        <div class="row">
            <div class="col l4 m4 s4">
                <a class='dropdown-button btn' href='#' data-activates='period'>
                    @if (Request.QueryString["filter"] == "month")
                    {
                        <span>месяц</span>
                    }
                    else if (Request.QueryString["filter"] == "quarter")
                    {
                        <span>квартал</span>
                    }
                    else if (Request.QueryString["filter"] == "year")
                    {
                        <span>год</span>
                    }
                    else if (Request.QueryString["filter"] == "5year")
                    {
                        <span>5 лет</span>
                    }
                    else if (Request.QueryString["filter"] == "alltime")
                    {
                        <span>все время</span>
                    }
                </a>

                <!-- Dropdown Structure -->
                <ul id='period' class='dropdown-content'>
                    <li>
                        <a class="@(Request.QueryString["filter"] == "month" ? "disabled" : null)" href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"filter", "month"}})">месяц</a>
                    </li>
                    <li>
                        <a class=" @(Request.QueryString["filter"] == "quarter" ? "disabled" : null) " href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"filter", "quarter"}})">квартал</a>
                    </li>
                    <li>
                        <a class="@(Request.QueryString["filter"] == "year" ? "disabled" : null)" href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"filter", "year"}})">год</a>
                    </li>
                    @*<li>
                        <a class="@(Request.QueryString["filter"] == "5year" ? "disabled" : null)" href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"filter", "5year"}})">5 лет</a>
                    </li>*@
                    <li>
                        <a class="@(Request.QueryString["filter"] == "alltime" ? "disabled" : null)" href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"filter", "alltime"}})">все время</a>
                    </li>
                </ul>
            </div>
            @if (Request.QueryString["filter"] == "month")
            {
                <div class="col l4 m4 s4">

                    <a class='dropdown-button btn' href='#' data-activates='month'>
                        @if (month > 0 && month <= 12)
                        {
                            @DateTimeFormatInfo.CurrentInfo.GetMonthName(month)
                        }
                        else
                        {
                            @:error
            }
                    </a>
                    <ul id='month' class='dropdown-content'>
                        @for (int i = 1; i <= 12; i++)
                        {
                            <li><a href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"month", i}})">@DateTimeFormatInfo.CurrentInfo.GetMonthName(i)</a></li>
                        }
                    </ul>

                </div>
            }
            else if (Request.QueryString["filter"] == "quarter")
            {
                <div class="col l4 m4 s4">
                    <a class='dropdown-button btn' href='#' data-activates='quarter'>
                        @if (quarter == 1)
                        {
                            @:I
            }
                        else if (quarter == 2)
                        {
                            @:II
            }
                        else if (quarter == 3)
                        {
                            @:III
            }
                        else if (quarter == 4)
                        {
                            @:IV
            }
                    </a>
                    <ul id='quarter' class='dropdown-content'>
                        <li><a href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"quarter", 1}})">I</a></li>
                        <li><a href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"quarter", 2}})">II</a></li>
                        <li><a href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"quarter", 3}})">III</a></li>
                        <li><a href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"quarter", 4}})">IV</a></li>
                    </ul>
                </div>
            }
            @if (Request.QueryString["filter"] == "month" || Request.QueryString["filter"] == "quarter" || Request.QueryString["filter"] == "year")
            {
                <div class="col l4 m4 s4">

                    <a class='dropdown-button btn' href='#' data-activates='year'>
                        @year
                    </a>
                    <ul id='year' class='dropdown-content'>
                        @for (int i = 2014; i <= DateTime.Now.Year; i++)
                        {
                            <li><a href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"year", i}})">@i</a></li>
                        }
                    </ul>
                </div>
            }
            @if (Request.QueryString["filter"] == "5year")
            {
                <div class="col l4 m4 s4">
                    <a class='dropdown-button btn' href='#' data-activates='year'>
                        @String.Format("{0}-{1}", year, year+5)
                    </a>
                    <ul id='year' class='dropdown-content'>
                        @for (int i = 2010; i <= DateTime.Now.Year; i+=5)
                        {
                            <li><a href="@Url.ModifyQueryString(url2Modify, new Dictionary<string, object> {{"year", i}})">@String.Format("{0}-{1}", i, i + 5)</a></li>
                        }
                    </ul>
                </div>
            }
        </div>
        <div class="row">
            <div class="col l12 s12 m12" id="categoryContainer">
                @Html.Partial("Loader")
            </div>
        </div>
    </div>
    <div class="col l8 m6 s12">
        <div id="incPieChartContainer"></div>
        <div id="expPieChartContainer"></div>
        <div id="totalChartContainer"></div>
        <div id="calendarChartContainer"></div>
    </div>
</div>
<script type="text/javascript">
    $(function () {
        //$('#mthYear li a').click(selYm);
        //$('#mthMonth li a').click(selYm);
        loadCategoryReport();
    });

    function loadCategoryReport() {
        var $cont = $('#categoryContainer');
        $.get('@Url.Action("SpendCategoryReport")?filter=@Request.QueryString["filter"]&year=@Request.QueryString["year"]&month=@Request.QueryString["month"]&quarter=@Request.QueryString["quarter"]', function (data) {
            $cont.html(data);
            //loadTotalChart();
        });
    }
    google.charts.load("current", { packages: ['corechart',"calendar"] });
    google.charts.setOnLoadCallback(loadTotalChart);
    google.charts.setOnLoadCallback(loadPieChart);
    google.charts.setOnLoadCallback(loadCalendarChart);
    function loadCalendarChart() {
        $.ajax({
            url: '@Url.Action("GetSpendListChartData")?filter=@Request.QueryString["filter"]&year=@Request.QueryString["year"]&month=@Request.QueryString["month"]&quarter=@Request.QueryString["quarter"]&vectorSysName=',
            method: 'POST',
            async: false,
            success: function (data) {
                if (data.length > 0) {
                    var dataPoints = [];
                    //dataPoints.push(['Категория', 'Сумма', 'ID']);
                    for (var i = 0; i < data.length; i++) {
                        var item = data[i];
                        dataPoints.push([new Date(item.Year, item.Month-1, item.Day), item.Sum]);
                    }
                    var dataTable = new google.visualization.DataTable();
                    dataTable.addColumn({ type: 'date', id: 'Date' });
                    dataTable.addColumn({ type: 'number', id: 'Sum' });
                    dataTable.addRows(dataPoints);

                    var chart = new google.visualization.Calendar(document.getElementById('calendarChartContainer'));

                    var options = {
                        title: "График",
                        height: 900,
                        noDataPattern: {
                            backgroundColor: '#ddd',
                            color: '#ccc'
                        }
                    };

                    chart.draw(dataTable, options);
                }
            },
            error: function (data) {
                console.log(data);
            }
        });

        @*$.ajax({
            url: '@Url.Action("GetSpendListChartData")?filter=@Request.QueryString["filter"]&year=@Request.QueryString["year"]&month=@Request.QueryString["month"]&quarter=@Request.QueryString["quarter"]&vectorSysName=EXP',
            method: 'POST',
            async: false,
            success: function (data) {
                if (data.length > 0) {
                    var dataPoints = [];
                    //dataPoints.push(['Категория', 'Сумма', 'ID']);
                    for (var i = 0; i < data.length; i++) {
                        var item = data[i];
                        dataPoints.push([new Date(item.Year, item.Month, item.Day), item.Sum]);
                    }
                    var dataTable = new google.visualization.DataTable();
                    dataTable.addColumn({ type: 'date', id: 'Date' });
                    dataTable.addColumn({ type: 'number', id: 'Sum' });
                    dataTable.addRows(dataPoints);

                    var chart = new google.visualization.Calendar(document.getElementById('expCalendarChartContainer'));

                    var options = {
                        title: "Расход"
                    };

                    chart.draw(dataTable, options);
                }
            },
            error: function (data) {
                console.log(data);
            }
        });*@
    }
    function loadPieChart() {

        $.ajax({
            url: '@Url.Action("SpendCategoryReportData")?filter=@Request.QueryString["filter"]&year=@Request.QueryString["year"]&month=@Request.QueryString["month"]&quarter=@Request.QueryString["quarter"]&vectorSysName=EXP',
            method: 'POST',
            async: false,
            success: function (data) {
                if (data.length > 0) {
                    var dataPoints = [];
                    dataPoints.push(['Категория', 'Сумма']);
                    for (var i = 0; i < data.length; i++) {
                        var item = data[i];
                        dataPoints.push([item.SpendCategoryName, item.Sum]);
                    }
                    var chartData = google.visualization.arrayToDataTable(dataPoints);

                    var options = {
                        title: 'Расход',
                        //is3D: true,
                        height: 400,
                        //enableInteractivity: true,
                        pieHole: 0.4
                    };

                    var chart = new google.visualization.PieChart(document.getElementById('expPieChartContainer'));
                    function selectHandler() {
                        var selectedItem = chart.getSelection()[0];
                        console.log(selectedItem);
                        if (selectedItem) {
                            var topping = chartData.getValue(selectedItem.row, 0);
                            console.log(topping);
                        }
                    }
                    google.visualization.events.addListener(chart, 'select', selectHandler);

                    chart.draw(chartData, options);


                }
            },
            error: function (data) {
                console.log(data);
            }
        });

        $.ajax({
            url: '@Url.Action("SpendCategoryReportData")?filter=@Request.QueryString["filter"]&year=@Request.QueryString["year"]&month=@Request.QueryString["month"]&quarter=@Request.QueryString["quarter"]&vectorSysName=INC',
            method: 'POST',
            async: false,
            success: function (data) {
                if (data.length > 0) {
                    var dataPoints = [];
                    dataPoints.push(['Категория', 'Сумма']);
                    for (var i = 0; i < data.length; i++) {
                        var item = data[i];
                        dataPoints.push([item.SpendCategoryName, item.Sum]);
                    }
                    var chartData = google.visualization.arrayToDataTable(dataPoints);

                    var options = {
                        title: 'Доход',
                        //is3D: true,
                        height: 400,
                        pieHole: 0.4
                    };

                    var chart = new google.visualization.PieChart(document.getElementById('incPieChartContainer'));

                    chart.draw(chartData, options);
                }
            },
            error: function (data) {
                console.log(data);
            }
        });
    }

    function loadTotalChart() {


        $.ajax({
            url: '@Url.Action("GetCumulativeTotalChartData")?filter=@Request.QueryString["filter"]&year=@Request.QueryString["year"]&month=@Request.QueryString["month"]&quarter=@Request.QueryString["quarter"]',
            method: 'POST',
            async: false,
            success: function (data) {
                if (data.length > 0) {
                    var dataPoints = [];
                    dataPoints.push(['Дата', 'Сумма']);
                    for (var i = 0; i < data.length; i++) {
                        var item = data[i];
                        dataPoints.push([item.DateStr, item.CumulativeTotal]);
                    }
                    var chartData = google.visualization.arrayToDataTable(dataPoints);

                    var options = {
                        title: 'Состояние счета',
                        hAxis: { title: 'Дата', titleTextStyle: { color: '#333' } },
                        vAxis: { minValue: 0 }
                    };

                    var chart = new google.visualization.SteppedAreaChart(document.getElementById('totalChartContainer'));
                    chart.draw(chartData, options);
                }
            },
            error: function (data) {
                console.log(data);
            }
        });


    }

    @*function loadTotalChart() {
        var dataPoints = [];
        $.ajax({
            url: '@Url.Action("GetCumulativeTotalChartData")?filter=@Request.QueryString["filter"]&year=@Request.QueryString["year"]&month=@Request.QueryString["month"]',
            method: 'POST',
            async: false,
            success: function (data) {
                for (var i = 0; i < data.length; i++) {
                    var item = data[i];
                    dataPoints.push({ x: new Date(item.Year, item.Month, item.Day), y: item.CumulativeTotal });
                }
            },
            error: function (data) {
                console.log(data);
            }
        });

        var options = {
            animationEnabled: true,
            //axisX: {
            //    title: "Время",
            //    gridThickness: 2
            //},
            //axisY: {
            //    title: "Downloads"
            //},
            xValueType: "dateTime",
            data: [
                {
                    type: "stackedArea", //change it to line, area, column, pie, etc
                    //showInLegend: "true",
                    markerType: "circle",
                    //legendText: "доход",
                    //legendMarkerBorderColor: '#66bb6a',
                    markerColor: '#9fa8da',
                    color: '#9fa8da',
                    legendMarkerColor: '#9fa8da',
                    dataPoints: dataPoints
                }
            ]
        };

        $("#chartContainer").CanvasJSChart(options);
    }*@

    @*function loadIncExpChart() {
        var incDataPoints = [];
        $.ajax({
            url: '@Url.Action("GetIncomeChartData")?filter=@Request.QueryString["filter"]&year=@Request.QueryString["year"]&month=@Request.QueryString["month"]',
            method: 'POST',
            async:false,
            success: function(data) {
                for (var i = 0; i < data.length; i++) {
                    var item = data[i];
                    incDataPoints.push({ x: new Date(item.Year, item.Month, item.Day), y: item.Sum });
                }
            },
            error:function(data) {
                console.log(data);
            }
        });
        var expDataPoints = [];
        $.ajax({
            url: '@Url.Action("GetExpenseChartData")?filter=@Request.QueryString["filter"]&year=@Request.QueryString["year"]&month=@Request.QueryString["month"]',
            method: 'POST',
            async: false,
            success: function (data) {
                for (var i = 0; i < data.length; i++) {
                    var item = data[i];
                    expDataPoints.push({ x: new Date(item.Year, item.Month, item.Day), y: item.Sum });
                }
            },
            error: function (data) {
                console.log(data);
            }
        });

        var options = {
            animationEnabled: true,
            //axisX: {
            //    title: "Время",
            //    gridThickness: 2
            //},
            //axisY: {
            //    title: "Downloads"
            //},
            xValueType: "dateTime",
            data: [
                {
                    type: "stackedArea", //change it to line, area, column, pie, etc
                    showInLegend: "true",
                    markerType: "circle",
                    legendText: "доход",
                    //legendMarkerBorderColor: '#66bb6a',
                    markerColor: '#66bb6a',
                    color: '#66bb6a',
                    legendMarkerColor: '#66bb6a',
                    dataPoints: incDataPoints
                }
                ,
                {
                    type: "stackedArea", //change it to line, area, column, pie, etc
                    showInLegend: "true",
                    markerType: "circle",
                    legendText: "расход",
                    //legendMarkerBorderColor: '#ef9a9a',
                    color: '#ef9a9a',
                    legendMarkerColor: '#ef9a9a',
                    dataPoints: expDataPoints
                }
            ]
        };

        $("#chartContainer").CanvasJSChart(options);
    }*@

    @*function selYm() {
        var year = $(this).attr('y');
        var month = $(this).attr('m');

        window.location = '@Url.Action("Stat")?y=' + year + '&m=' + month;
    }*@
</script>